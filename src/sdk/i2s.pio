; PCM-A Audio

.program pio_i2s_rx
.side_set 2
.wrap_target

                      ;      ,--- SCLK
                      ;      |,-- LRCK
public entry_point:   ;      ||
    irq clear 7       side 0b01
    set x, 31         side 0b11

    nop               side 0b01
    nop               side 0b11

bitloop:
    // Get the bits.
    in pins, 1        side 0b00
    jmp x-- bitloop   side 0b10

    // Keep clocking, prepare for 6 idle loops.
    set x, 6          side 0b00
    set y, 27         side 0b10

idle:
    nop               side 0b00
    jmp y-- idle      side 0b10

    // We are now at tick 63.
    // We need 255 total to feed MCLK.
    // So we need further 6x32 idle ticks.

    set y, 30         side 0b00
    jmp x-- idle      side 0b10
.wrap

.program pio_i2s_tx
public entry_point:
    nop
    set x, 31

.wrap_target

bitloop1:
    out pins, 1
    jmp x-- bitloop1

    set x, 31
    irq wait 7
.wrap

% c-sdk {

struct pio_i2s_config {
	PIO pio;
	int rx_sm, tx_sm;
	int origin;
	int in_pin;
	int out_pin;
	int clock_pin_base;
	float sample_rate;
};

inline static int pio_i2s_rx_init(struct pio_i2s_config *cfg) {
	pio_sm_set_enabled(cfg->pio, cfg->rx_sm, false);
	pio_sm_restart(cfg->pio, cfg->rx_sm);
	pio_sm_clear_fifos(cfg->pio, cfg->rx_sm);

	int origin = cfg->origin;
	static struct pio_program program = pio_i2s_rx_program;
	program.origin = origin;

	if (!pio_can_add_program(cfg->pio, &program))
		return -1;

	origin = pio_add_program(cfg->pio, &program);

	pio_gpio_init(cfg->pio, cfg->in_pin);
	pio_gpio_init(cfg->pio, cfg->clock_pin_base);
	pio_gpio_init(cfg->pio, cfg->clock_pin_base + 1);

	pio_sm_config sm_config = pio_i2s_rx_program_get_default_config(origin);

	sm_config_set_in_pins(&sm_config, cfg->in_pin);
	sm_config_set_sideset_pins(&sm_config, cfg->clock_pin_base);
	sm_config_set_out_shift(&sm_config, false, true, 32);
	sm_config_set_in_shift(&sm_config, false, true, 32);

  float freq = 256 * 2 * cfg->sample_rate;
  float clkdiv = (float)CLK_SYS_HZ / freq;
  int clkdiv_int = clkdiv;
  int clkdiv_frac = 256 * (clkdiv - clkdiv_int);
	sm_config_set_clkdiv_int_frac(&sm_config, clkdiv_int, clkdiv_frac);

  printf("i2s: out=%i in=%i bclk=%i lrck=%i clkdiv=%i+%i/256\n",
         cfg->out_pin, cfg->in_pin, cfg->clock_pin_base + 1, cfg->clock_pin_base,
         clkdiv_int, clkdiv_frac);

	pio_sm_init(cfg->pio, cfg->rx_sm, origin + pio_i2s_rx_offset_entry_point, &sm_config);

	uint out_mask = 3u << cfg->clock_pin_base;
	pio_sm_set_pindirs_with_mask(cfg->pio, cfg->rx_sm, out_mask, out_mask);

	uint in_mask = 1u << cfg->in_pin;
	pio_sm_set_pindirs_with_mask(cfg->pio, cfg->rx_sm, 0, in_mask);

	pio_sm_set_pins(cfg->pio, cfg->rx_sm, 0);

	return origin;
}

inline static int pio_i2s_tx_init(struct pio_i2s_config *cfg) {
	pio_sm_set_enabled(cfg->pio, cfg->tx_sm, false);
	pio_sm_restart(cfg->pio, cfg->tx_sm);
	pio_sm_clear_fifos(cfg->pio, cfg->tx_sm);

	int origin = cfg->origin;
	static struct pio_program program = pio_i2s_tx_program;
	program.origin = origin;

	if (!pio_can_add_program(cfg->pio, &program))
		return -1;

	origin = pio_add_program(cfg->pio, &program);

	pio_gpio_init(cfg->pio, cfg->out_pin);

	pio_sm_config sm_config = pio_i2s_tx_program_get_default_config(origin);

	sm_config_set_out_pins(&sm_config, cfg->out_pin, 1);
	sm_config_set_out_shift(&sm_config, false, true, 32);
	sm_config_set_in_shift(&sm_config, false, true, 32);

  float freq = 256 * 2 * cfg->sample_rate;
  float clkdiv = (float)CLK_SYS_HZ / freq;
  int clkdiv_int = clkdiv;
  int clkdiv_frac = 256 * (clkdiv - clkdiv_int);
	sm_config_set_clkdiv_int_frac(&sm_config, clkdiv_int, clkdiv_frac);

	pio_sm_init(cfg->pio, cfg->tx_sm, origin + pio_i2s_tx_offset_entry_point, &sm_config);

	uint out_mask = 1u << cfg->out_pin;
	pio_sm_set_pindirs_with_mask(cfg->pio, cfg->tx_sm, out_mask, out_mask);

	pio_sm_set_pins(cfg->pio, cfg->tx_sm, 0);

	return origin;
}

%}
